"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginShortcutKey = exports.handleFuncs = exports.SKey = void 0;

var _xeUtils = _interopRequireDefault(require("xe-utils/methods/xe-utils"));

var _handleFuncs;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var arrowKeys = 'right,up,left,down'.split(',');
var specialKeys = 'alt,ctrl,shift,meta'.split(',');
var settingMaps = {};
var listenerMaps = {};
var disabledMaps = {};
/* eslint-enable no-unused-vars */

var SKey = /*#__PURE__*/function () {
  function SKey(realKey, specialKey, funcName, kConf) {
    _classCallCheck(this, SKey);

    this.realKey = realKey;
    this.specialKey = specialKey;
    this.funcName = funcName;
    this.kConf = kConf;
  }

  _createClass(SKey, [{
    key: "trigger"
    /* TRIGGER */
    ,
    value: function trigger(params, evnt) {
      if (!this.specialKey || evnt["".concat(this.specialKey, "Key")]) {
        if (this.funcName) {
          return handleFuncs[this.funcName](params, evnt);
        }
      }
    }
  }, {
    key: "emit"
    /* EMIT */
    ,
    value: function emit(params, evnt) {
      if (!this.specialKey || evnt["".concat(this.specialKey, "Key")]) {
        if (this.kConf) {
          return this.kConf.callback(params, evnt);
        }
      }
    }
  }]);

  return SKey;
}();

exports.SKey = SKey;

function getEventKey(key) {
  if (arrowKeys.indexOf(key.toLowerCase()) > -1) {
    return "Arrow".concat(key);
  }

  return key;
}

function isTriggerPage(params) {
  return !params.$table.getActiveRecord();
}

function handleChangePage(func) {
  return function (params, evnt) {
    var $grid = params.$grid,
        $table = params.$table;
    var _$table$mouseConfig = $table.mouseConfig,
        mouseConfig = _$table$mouseConfig === void 0 ? {} : _$table$mouseConfig;

    if ($grid && mouseConfig.selected !== true && ['input', 'textarea'].indexOf(evnt.target.tagName.toLowerCase()) === -1 && isTriggerPage(params)) {
      var pager = $grid.$refs.pager;

      if (pager) {
        evnt.preventDefault();
        pager[func](evnt);
      }
    }
  };
}

function handleCellMove(arrowIndex) {
  return function (params, evnt) {
    var $table = params.$table;
    var selected = $table.getSelectedCell();
    var arrows = [0, 0, 0, 0];
    arrows[arrowIndex] = 1;

    if (selected) {
      $table.moveSelected(selected.row, arrows[0], arrows[1], arrows[2], arrows[3], evnt);
      return false;
    }
  };
}

function handleCurrentRowMove(isDown) {
  return function (params, evnt) {
    var $table = params.$table;

    if ($table.highlightCurrentRow) {
      var currentRow = $table.getCurrentRecord();

      if (currentRow) {
        $table.moveCurrentRow(!isDown, isDown, evnt);
        return false;
      }
    }
  };
}
/**
 * 快捷键处理方法
 */


var handleFuncs = (_handleFuncs = {}, _defineProperty(_handleFuncs, "table.edit.actived"
/* TABLE_EDIT_ACTIVED */
, function tableEditActived(params, evnt) {
  var $table = params.$table;
  var selected = $table.getSelectedCell();

  if (selected) {
    evnt.preventDefault();
    $table.setActiveCell(selected.row, selected.column.property);
    return false;
  }
}), _defineProperty(_handleFuncs, "table.edit.closed"
/* TABLE_EDIT_CLOSED */
, function tableEditClosed(params, evnt) {
  var $table = params.$table;
  var _$table$mouseConfig2 = $table.mouseConfig,
      mouseConfig = _$table$mouseConfig2 === void 0 ? {} : _$table$mouseConfig2;
  var actived = $table.getActiveRecord();

  if (actived) {
    evnt.preventDefault();
    $table.clearActived();

    if (mouseConfig.selected) {
      $table.$nextTick(function () {
        return $table.setSelectCell(actived.row, actived.column.property);
      });
    }

    return false;
  }
}), _defineProperty(_handleFuncs, "table.cell.leftMove"
/* TABLE_CELL_LEFTMOVE */
, handleCellMove(0)), _defineProperty(_handleFuncs, "table.cell.upMove"
/* TABLE_CELL_UPMOVE */
, handleCellMove(1)), _defineProperty(_handleFuncs, "table.cell.rightMove"
/* TABLE_CELL_RIGHTMOVE */
, handleCellMove(2)), _defineProperty(_handleFuncs, "table.cell.downMove"
/* TABLE_CELL_DOWNMOVE */
, handleCellMove(3)), _defineProperty(_handleFuncs, "table.row.current.topMove"
/* TABLE_ROW_CURRENT_TOPMOVE */
, handleCurrentRowMove(false)), _defineProperty(_handleFuncs, "table.row.current.downMove"
/* TABLE_ROW_CURRENT_DOWNMOVE */
, handleCurrentRowMove(true)), _defineProperty(_handleFuncs, "pager.prevPage"
/* PAGER_PREVPAGE */
, handleChangePage('prevPage')), _defineProperty(_handleFuncs, "pager.nextPage"
/* PAGER_NEXTPAGE */
, handleChangePage('nextPage')), _defineProperty(_handleFuncs, "pager.prevJump"
/* PAGER_PREVJUMP */
, handleChangePage('prevJump')), _defineProperty(_handleFuncs, "pager.nextJump"
/* PAGER_NEXTJUMP */
, handleChangePage('nextJump')), _handleFuncs);
exports.handleFuncs = handleFuncs;

function runEvent(key, maps, prop, params, evnt) {
  var skeyList = maps[key.toLowerCase()];

  if (skeyList) {
    return !skeyList.some(function (skey) {
      return skey[prop](params, evnt) === false;
    });
  }
}

function handleShortcutKeyEvent(params, evnt) {
  var key = getEventKey(evnt.key);

  if (!runEvent(key, disabledMaps, "emit"
  /* EMIT */
  , params, evnt)) {
    if (runEvent(key, settingMaps, "trigger"
    /* TRIGGER */
    , params, evnt) === false) {
      return false;
    }

    runEvent(key, listenerMaps, "emit"
    /* EMIT */
    , params, evnt);
  }
}

function parseKeys(key) {
  var specialKey = '';
  var realKey = '';
  var keys = key.split('+');
  keys.forEach(function (item) {
    item = item.toLowerCase().trim();

    if (specialKeys.indexOf(item) > -1) {
      specialKey = item;
    } else {
      realKey = item;
    }
  });

  if (!realKey || keys.length > 2 || keys.length === 2 && !specialKey) {
    throw new Error("[vxe-table-plugin-shortcut-key] Invalid shortcut key configuration '".concat(key, "'."));
  }

  return {
    realKey: realKey,
    specialKey: specialKey
  };
}

function setKeyQueue(maps, kConf, funcName) {
  var _parseKeys = parseKeys(kConf.key),
      realKey = _parseKeys.realKey,
      specialKey = _parseKeys.specialKey;

  var skeyList = maps[realKey];

  if (!skeyList) {
    skeyList = maps[realKey] = [];
  }

  if (skeyList.some(function (skey) {
    return skey.realKey === realKey && skey.specialKey === specialKey;
  })) {
    throw new Error("[vxe-table-plugin-shortcut-key] Shortcut key conflict '".concat(kConf.key, "'."));
  }

  skeyList.push(new SKey(realKey, specialKey, funcName, kConf));
}

function parseDisabledKey(options) {
  _xeUtils["default"].each(options.disabled, function (conf) {
    var opts = _xeUtils["default"].isString(conf) ? {
      key: conf
    } : conf;
    setKeyQueue(disabledMaps, _xeUtils["default"].assign({
      callback: function callback() {
        return false;
      }
    }, opts));
  });
}

function parseSettingKey(options) {
  _xeUtils["default"].each(options.setting, function (opts, funcName) {
    var kConf = _xeUtils["default"].isString(opts) ? {
      key: opts
    } : opts;

    if (!handleFuncs[funcName]) {
      console.warn("[vxe-table-plugin-shortcut-key] '".concat(funcName, "' not exist."));
    }

    setKeyQueue(settingMaps, kConf, funcName);
  });
}

function parseListenerKey(options) {
  _xeUtils["default"].each(options.listener, function (callback, key) {
    if (!_xeUtils["default"].isFunction(callback)) {
      console.warn("[vxe-table-plugin-shortcut-key] '".concat(key, "' requires the callback function to be set."));
    }

    setKeyQueue(listenerMaps, {
      key: key,
      callback: callback
    });
  });
}
/**
 * 设置参数
 * @param options 参数
 */


function setup(options) {
  if (options) {
    parseDisabledKey(options);
    parseSettingKey(options);
    parseListenerKey(options);
  }
}
/**
 * 基于 vxe-table 表格的增强插件，为键盘操作提供快捷键的设置
 */


var VXETablePluginShortcutKey = {
  setup: setup,
  install: function install(xtable, options) {
    if (options) {
      setup(options);
    }

    xtable.interceptor.add('event.keydown', handleShortcutKeyEvent);
  }
};
exports.VXETablePluginShortcutKey = VXETablePluginShortcutKey;

if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginShortcutKey);
}

var _default = VXETablePluginShortcutKey;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbImFycm93S2V5cyIsInNwbGl0Iiwic3BlY2lhbEtleXMiLCJzZXR0aW5nTWFwcyIsImxpc3RlbmVyTWFwcyIsImRpc2FibGVkTWFwcyIsIlNLZXkiLCJyZWFsS2V5Iiwic3BlY2lhbEtleSIsImZ1bmNOYW1lIiwia0NvbmYiLCJwYXJhbXMiLCJldm50IiwiaGFuZGxlRnVuY3MiLCJjYWxsYmFjayIsImdldEV2ZW50S2V5Iiwia2V5IiwiaW5kZXhPZiIsInRvTG93ZXJDYXNlIiwiaXNUcmlnZ2VyUGFnZSIsIiR0YWJsZSIsImdldEFjdGl2ZVJlY29yZCIsImhhbmRsZUNoYW5nZVBhZ2UiLCJmdW5jIiwiJGdyaWQiLCJtb3VzZUNvbmZpZyIsInNlbGVjdGVkIiwidGFyZ2V0IiwidGFnTmFtZSIsInBhZ2VyIiwiJHJlZnMiLCJwcmV2ZW50RGVmYXVsdCIsImhhbmRsZUNlbGxNb3ZlIiwiYXJyb3dJbmRleCIsImdldFNlbGVjdGVkQ2VsbCIsImFycm93cyIsIm1vdmVTZWxlY3RlZCIsInJvdyIsImhhbmRsZUN1cnJlbnRSb3dNb3ZlIiwiaXNEb3duIiwiaGlnaGxpZ2h0Q3VycmVudFJvdyIsImN1cnJlbnRSb3ciLCJnZXRDdXJyZW50UmVjb3JkIiwibW92ZUN1cnJlbnRSb3ciLCJzZXRBY3RpdmVDZWxsIiwiY29sdW1uIiwicHJvcGVydHkiLCJhY3RpdmVkIiwiY2xlYXJBY3RpdmVkIiwiJG5leHRUaWNrIiwic2V0U2VsZWN0Q2VsbCIsInJ1bkV2ZW50IiwibWFwcyIsInByb3AiLCJza2V5TGlzdCIsInNvbWUiLCJza2V5IiwiaGFuZGxlU2hvcnRjdXRLZXlFdmVudCIsInBhcnNlS2V5cyIsImtleXMiLCJmb3JFYWNoIiwiaXRlbSIsInRyaW0iLCJsZW5ndGgiLCJFcnJvciIsInNldEtleVF1ZXVlIiwicHVzaCIsInBhcnNlRGlzYWJsZWRLZXkiLCJvcHRpb25zIiwiWEVVdGlscyIsImVhY2giLCJkaXNhYmxlZCIsImNvbmYiLCJvcHRzIiwiaXNTdHJpbmciLCJhc3NpZ24iLCJwYXJzZVNldHRpbmdLZXkiLCJzZXR0aW5nIiwiY29uc29sZSIsIndhcm4iLCJwYXJzZUxpc3RlbmVyS2V5IiwibGlzdGVuZXIiLCJpc0Z1bmN0aW9uIiwic2V0dXAiLCJWWEVUYWJsZVBsdWdpblNob3J0Y3V0S2V5IiwiaW5zdGFsbCIsInh0YWJsZSIsImludGVyY2VwdG9yIiwiYWRkIiwid2luZG93IiwiVlhFVGFibGUiLCJ1c2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFPQSxJQUFNQSxTQUFTLEdBQUcscUJBQXFCQyxLQUFyQixDQUEyQixHQUEzQixDQUFsQjtBQUNBLElBQU1DLFdBQVcsR0FBRyxzQkFBc0JELEtBQXRCLENBQTRCLEdBQTVCLENBQXBCO0FBQ0EsSUFBTUUsV0FBVyxHQUFpQixFQUFsQztBQUNBLElBQU1DLFlBQVksR0FBaUIsRUFBbkM7QUFDQSxJQUFNQyxZQUFZLEdBQWlCLEVBQW5DO0FBc0JBOztJQUVhQyxJO0FBS1gsZ0JBQWFDLE9BQWIsRUFBOEJDLFVBQTlCLEVBQWtEQyxRQUFsRCxFQUF3RUMsS0FBeEUsRUFBK0Y7QUFBQTs7QUFDN0YsU0FBS0gsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLEtBQUwsR0FBYUEsS0FBYjtBQUNEOzs7U0FDRDtBQUFBOzs0QkFBcUJDLE0sRUFBa0NDLEksRUFBUztBQUM5RCxVQUFJLENBQUMsS0FBS0osVUFBTixJQUFvQkksSUFBSSxXQUFJLEtBQUtKLFVBQVQsU0FBNUIsRUFBdUQ7QUFDckQsWUFBSSxLQUFLQyxRQUFULEVBQW1CO0FBQ2pCLGlCQUFPSSxXQUFXLENBQUMsS0FBS0osUUFBTixDQUFYLENBQTJCRSxNQUEzQixFQUFtQ0MsSUFBbkMsQ0FBUDtBQUNEO0FBQ0Y7QUFDRjs7U0FDRDtBQUFBOzt5QkFBa0JELE0sRUFBa0NDLEksRUFBUztB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QUFBT0YsTUFBQUEsUUFBUSxFQUFSQTtBQUFQLEtBQWYsQ0FBWDtBQUNELEdBTEQ7QUFNRDtBQXFCRDs7Ozs7O0FBSUEsU0FBU3FFLEtBQVQsQ0FBZ0JmLE9BQWhCLEVBQTJDO0FBQ3pDLE1BQUlBLE9BQUosRUFBYTtBQUNYRCxJQUFBQSxnQkFBZ0IsQ0FBQ0MsT0FBRCxDQUFoQjtBQUNBUSxJQUFBQSxlQUFlLENBQUNSLE9BQUQsQ0FBZjtBQUNBWSxJQUFBQSxnQkFBZ0IsQ0FBQ1osT0FBRCxDQUFoQjtBQUNEO0FBQ0Y7QUFFRDs7Ozs7QUFHTyxJQUFNZ0IseUJBQXlCLEdBQUc7QUFDdkNELEVBQUFBLEtBQUssRUFBTEEsS0FEdUM7QUFFdkNFLEVBQUFBLE9BRnVDLG1CQUU5QkMsTUFGOEIsRUFFTGxCLE9BRkssRUFFdUI7QUFDNUQsUUFBSUEsT0FBSixFQUFhO0FBQ1hlLE1BQUFBLEtBQUssQ0FBQ2YsT0FBRCxDQUFMO0FBQ0Q7O0FBQ0RrQixJQUFBQSxNQUFNLENBQUNDLFdBQVAsQ0FBbUJDLEdBQW5CLENBQXVCLGVBQXZCLEVBQXdDL0Isc0JBQXhDO0FBQ0Q7QUFQc0MsQ0FBbEM7OztBQVVQLElBQUksT0FBT2dDLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sQ0FBQ0MsUUFBNUMsRUFBc0Q7QUFDcERELEVBQUFBLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsR0FBaEIsQ0FBb0JQLHlCQUFwQjtBQUNEOztlQUVjQSx5QiIsImZpbGUiOiJpbmRleC5jb21tb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgWEVVdGlscyBmcm9tICd4ZS11dGlscy9tZXRob2RzL3hlLXV0aWxzJ1xyXG5pbXBvcnQgeyBWWEVUYWJsZSwgSW50ZXJjZXB0b3JLZXlkb3duUGFyYW1zIH0gZnJvbSAndnhlLXRhYmxlL2xpYi92eGUtdGFibGUnIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuXHJcbmludGVyZmFjZSBLZXlTdG9yZU1hcHMge1xyXG4gIFtwcm9wTmFtZTogc3RyaW5nXTogU0tleVtdO1xyXG59XHJcblxyXG5jb25zdCBhcnJvd0tleXMgPSAncmlnaHQsdXAsbGVmdCxkb3duJy5zcGxpdCgnLCcpXHJcbmNvbnN0IHNwZWNpYWxLZXlzID0gJ2FsdCxjdHJsLHNoaWZ0LG1ldGEnLnNwbGl0KCcsJylcclxuY29uc3Qgc2V0dGluZ01hcHM6IEtleVN0b3JlTWFwcyA9IHt9XHJcbmNvbnN0IGxpc3RlbmVyTWFwczogS2V5U3RvcmVNYXBzID0ge31cclxuY29uc3QgZGlzYWJsZWRNYXBzOiBLZXlTdG9yZU1hcHMgPSB7fVxyXG5cclxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cclxuZXhwb3J0IGNvbnN0IGVudW0gRlVOQ19OQU5FIHtcclxuICBUQUJMRV9FRElUX0FDVElWRUQgPSAndGFibGUuZWRpdC5hY3RpdmVkJyxcclxuICBUQUJMRV9FRElUX0NMT1NFRCA9ICd0YWJsZS5lZGl0LmNsb3NlZCcsXHJcbiAgVEFCTEVfQ0VMTF9MRUZUTU9WRSA9ICd0YWJsZS5jZWxsLmxlZnRNb3ZlJyxcclxuICBUQUJMRV9DRUxMX1VQTU9WRSA9ICd0YWJsZS5jZWxsLnVwTW92ZScsXHJcbiAgVEFCTEVfQ0VMTF9SSUdIVE1PVkUgPSAndGFibGUuY2VsbC5yaWdodE1vdmUnLFxyXG4gIFRBQkxFX0NFTExfRE9XTk1PVkUgPSAndGFibGUuY2VsbC5kb3duTW92ZScsXHJcbiAgVEFCTEVfUk9XX0NVUlJFTlRfVE9QTU9WRSA9ICd0YWJsZS5yb3cuY3VycmVudC50b3BNb3ZlJyxcclxuICBUQUJMRV9ST1dfQ1VSUkVOVF9ET1dOTU9WRSA9ICd0YWJsZS5yb3cuY3VycmVudC5kb3duTW92ZScsXHJcbiAgUEFHRVJfUFJFVlBBR0UgPSAncGFnZXIucHJldlBhZ2UnLFxyXG4gIFBBR0VSX05FWFRQQUdFID0gJ3BhZ2VyLm5leHRQYWdlJyxcclxuICBQQUdFUl9QUkVWSlVNUCA9ICdwYWdlci5wcmV2SnVtcCcsXHJcbiAgUEFHRVJfTkVYVEpVTVAgPSAncGFnZXIubmV4dEp1bXAnXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIFNLRVlfTkFORSB7XHJcbiAgVFJJR0dFUiA9ICd0cmlnZ2VyJyxcclxuICBFTUlUID0gJ2VtaXQnXHJcbn1cclxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIFNLZXkge1xyXG4gIHJlYWxLZXk6IHN0cmluZztcclxuICBzcGVjaWFsS2V5OiBzdHJpbmc7XHJcbiAgZnVuY05hbWU/OiBGVU5DX05BTkU7XHJcbiAga0NvbmY/OiBTaG9ydGN1dEtleUNvbmY7XHJcbiAgY29uc3RydWN0b3IgKHJlYWxLZXk6IHN0cmluZywgc3BlY2lhbEtleTogc3RyaW5nLCBmdW5jTmFtZT86IEZVTkNfTkFORSwga0NvbmY/OiBTaG9ydGN1dEtleUNvbmYpIHtcclxuICAgIHRoaXMucmVhbEtleSA9IHJlYWxLZXlcclxuICAgIHRoaXMuc3BlY2lhbEtleSA9IHNwZWNpYWxLZXlcclxuICAgIHRoaXMuZnVuY05hbWUgPSBmdW5jTmFtZVxyXG4gICAgdGhpcy5rQ29uZiA9IGtDb25mXHJcbiAgfVxyXG4gIFtTS0VZX05BTkUuVFJJR0dFUl0gKHBhcmFtczogSW50ZXJjZXB0b3JLZXlkb3duUGFyYW1zLCBldm50OiBhbnkpIHtcclxuICAgIGlmICghdGhpcy5zcGVjaWFsS2V5IHx8IGV2bnRbYCR7dGhpcy5zcGVjaWFsS2V5fUtleWBdKSB7XHJcbiAgICAgIGlmICh0aGlzLmZ1bmNOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGhhbmRsZUZ1bmNzW3RoaXMuZnVuY05hbWVdKHBhcmFtcywgZXZudClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBbU0tFWV9OQU5FLkVNSVRdIChwYXJhbXM6IEludGVyY2VwdG9yS2V5ZG93blBhcmFtcywgZXZudDogYW55KSB7XHJcbiAgICBpZiAoIXRoaXMuc3BlY2lhbEtleSB8fCBldm50W2Ake3RoaXMuc3BlY2lhbEtleX1LZXlgXSkge1xyXG4gICAgICBpZiAodGhpcy5rQ29uZikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmtDb25mLmNhbGxiYWNrKHBhcmFtcywgZXZudClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RXZlbnRLZXkgKGtleTogc3RyaW5nKTogc3RyaW5nIHtcclxuICBpZiAoYXJyb3dLZXlzLmluZGV4T2Yoa2V5LnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcclxuICAgIHJldHVybiBgQXJyb3cke2tleX1gXHJcbiAgfVxyXG4gIHJldHVybiBrZXlcclxufVxyXG5cclxuZnVuY3Rpb24gaXNUcmlnZ2VyUGFnZSAocGFyYW1zOiBJbnRlcmNlcHRvcktleWRvd25QYXJhbXMpOiBib29sZWFuIHtcclxuICByZXR1cm4gIXBhcmFtcy4kdGFibGUuZ2V0QWN0aXZlUmVjb3JkKClcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2hhbmdlUGFnZSAoZnVuYzogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChwYXJhbXM6IEludGVyY2VwdG9yS2V5ZG93blBhcmFtcywgZXZudDogYW55KTogYW55IHtcclxuICAgIGNvbnN0IHsgJGdyaWQsICR0YWJsZSB9ID0gcGFyYW1zXHJcbiAgICBjb25zdCB7IG1vdXNlQ29uZmlnID0ge30gfSA9ICR0YWJsZVxyXG4gICAgaWYgKCRncmlkICYmIG1vdXNlQ29uZmlnLnNlbGVjdGVkICE9PSB0cnVlICYmIFsnaW5wdXQnLCAndGV4dGFyZWEnXS5pbmRleE9mKGV2bnQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xICYmIGlzVHJpZ2dlclBhZ2UocGFyYW1zKSkge1xyXG4gICAgICBjb25zdCBwYWdlcjogYW55ID0gJGdyaWQuJHJlZnMucGFnZXJcclxuICAgICAgaWYgKHBhZ2VyKSB7XHJcbiAgICAgICAgZXZudC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgcGFnZXJbZnVuY10oZXZudClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2VsbE1vdmUgKGFycm93SW5kZXg6IG51bWJlcikge1xyXG4gIHJldHVybiBmdW5jdGlvbiAocGFyYW1zOiBJbnRlcmNlcHRvcktleWRvd25QYXJhbXMsIGV2bnQ6IGFueSk6IGFueSB7XHJcbiAgICBjb25zdCAkdGFibGU6IGFueSA9IHBhcmFtcy4kdGFibGVcclxuICAgIGNvbnN0IHNlbGVjdGVkID0gJHRhYmxlLmdldFNlbGVjdGVkQ2VsbCgpXHJcbiAgICBjb25zdCBhcnJvd3M6IG51bWJlcltdID0gWzAsIDAsIDAsIDBdXHJcbiAgICBhcnJvd3NbYXJyb3dJbmRleF0gPSAxXHJcbiAgICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgICAgJHRhYmxlLm1vdmVTZWxlY3RlZChzZWxlY3RlZC5yb3csIGFycm93c1swXSwgYXJyb3dzWzFdLCBhcnJvd3NbMl0sIGFycm93c1szXSwgZXZudClcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDdXJyZW50Um93TW92ZSAoaXNEb3duOiBib29sZWFuKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChwYXJhbXM6IEludGVyY2VwdG9yS2V5ZG93blBhcmFtcywgZXZudDogYW55KTogYW55IHtcclxuICAgIGNvbnN0ICR0YWJsZTogYW55ID0gcGFyYW1zLiR0YWJsZVxyXG4gICAgaWYgKCR0YWJsZS5oaWdobGlnaHRDdXJyZW50Um93KSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSAkdGFibGUuZ2V0Q3VycmVudFJlY29yZCgpXHJcbiAgICAgIGlmIChjdXJyZW50Um93KSB7XHJcbiAgICAgICAgJHRhYmxlLm1vdmVDdXJyZW50Um93KCFpc0Rvd24sIGlzRG93biwgZXZudClcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOW/q+aNt+mUruWkhOeQhuaWueazlVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGhhbmRsZUZ1bmNzID0ge1xyXG4gIFtGVU5DX05BTkUuVEFCTEVfRURJVF9BQ1RJVkVEXSAocGFyYW1zOiBJbnRlcmNlcHRvcktleWRvd25QYXJhbXMsIGV2bnQ6IGFueSk6IGFueSB7XHJcbiAgICBjb25zdCB7ICR0YWJsZSB9ID0gcGFyYW1zXHJcbiAgICBjb25zdCBzZWxlY3RlZCA9ICR0YWJsZS5nZXRTZWxlY3RlZENlbGwoKVxyXG4gICAgaWYgKHNlbGVjdGVkKSB7XHJcbiAgICAgIGV2bnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAkdGFibGUuc2V0QWN0aXZlQ2VsbChzZWxlY3RlZC5yb3csIHNlbGVjdGVkLmNvbHVtbi5wcm9wZXJ0eSlcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgfSxcclxuICBbRlVOQ19OQU5FLlRBQkxFX0VESVRfQ0xPU0VEXSAocGFyYW1zOiBJbnRlcmNlcHRvcktleWRvd25QYXJhbXMsIGV2bnQ6IGFueSk6IGFueSB7XHJcbiAgICBjb25zdCB7ICR0YWJsZSB9ID0gcGFyYW1zXHJcbiAgICBjb25zdCB7IG1vdXNlQ29uZmlnID0ge30gfSA9ICR0YWJsZVxyXG4gICAgY29uc3QgYWN0aXZlZCA9ICR0YWJsZS5nZXRBY3RpdmVSZWNvcmQoKVxyXG4gICAgaWYgKGFjdGl2ZWQpIHtcclxuICAgICAgZXZudC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICR0YWJsZS5jbGVhckFjdGl2ZWQoKVxyXG4gICAgICBpZiAobW91c2VDb25maWcuc2VsZWN0ZWQpIHtcclxuICAgICAgICAkdGFibGUuJG5leHRUaWNrKCgpID0+ICR0YWJsZS5zZXRTZWxlY3RDZWxsKGFjdGl2ZWQucm93LCBhY3RpdmVkLmNvbHVtbi5wcm9wZXJ0eSkpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgfSxcclxuICBbRlVOQ19OQU5FLlRBQkxFX0NFTExfTEVGVE1PVkVdOiBoYW5kbGVDZWxsTW92ZSgwKSxcclxuICBbRlVOQ19OQU5FLlRBQkxFX0NFTExfVVBNT1ZFXTogaGFuZGxlQ2VsbE1vdmUoMSksXHJcbiAgW0ZVTkNfTkFORS5UQUJMRV9DRUxMX1JJR0hUTU9WRV06IGhhbmRsZUNlbGxNb3ZlKDIpLFxyXG4gIFtGVU5DX05BTkUuVEFCTEVfQ0VMTF9ET1dOTU9WRV06IGhhbmRsZUNlbGxNb3ZlKDMpLFxyXG4gIFtGVU5DX05BTkUuVEFCTEVfUk9XX0NVUlJFTlRfVE9QTU9WRV06IGhhbmRsZUN1cnJlbnRSb3dNb3ZlKGZhbHNlKSxcclxuICBbRlVOQ19OQU5FLlRBQkxFX1JPV19DVVJSRU5UX0RPV05NT1ZFXTogaGFuZGxlQ3VycmVudFJvd01vdmUodHJ1ZSksXHJcbiAgW0ZVTkNfTkFORS5QQUdFUl9QUkVWUEFHRV06IGhhbmRsZUNoYW5nZVBhZ2UoJ3ByZXZQYWdlJyksXHJcbiAgW0ZVTkNfTkFORS5QQUdFUl9ORVhUUEFHRV06IGhhbmRsZUNoYW5nZVBhZ2UoJ25leHRQYWdlJyksXHJcbiAgW0ZVTkNfTkFORS5QQUdFUl9QUkVWSlVNUF06IGhhbmRsZUNoYW5nZVBhZ2UoJ3ByZXZKdW1wJyksXHJcbiAgW0ZVTkNfTkFORS5QQUdFUl9ORVhUSlVNUF06IGhhbmRsZUNoYW5nZVBhZ2UoJ25leHRKdW1wJylcclxufVxyXG5cclxuZnVuY3Rpb24gcnVuRXZlbnQgKGtleTogc3RyaW5nLCBtYXBzOiBhbnksIHByb3A6IFNLRVlfTkFORSwgcGFyYW1zOiBJbnRlcmNlcHRvcktleWRvd25QYXJhbXMsIGV2bnQ6IGFueSkge1xyXG4gIGxldCBza2V5TGlzdDogU0tleVtdID0gbWFwc1trZXkudG9Mb3dlckNhc2UoKV1cclxuICBpZiAoc2tleUxpc3QpIHtcclxuICAgIHJldHVybiAhc2tleUxpc3Quc29tZSgoc2tleTogU0tleSkgPT4gc2tleVtwcm9wXShwYXJhbXMsIGV2bnQpID09PSBmYWxzZSlcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVNob3J0Y3V0S2V5RXZlbnQgKHBhcmFtczogSW50ZXJjZXB0b3JLZXlkb3duUGFyYW1zLCBldm50OiBhbnkpIHtcclxuICBsZXQga2V5OiBzdHJpbmcgPSBnZXRFdmVudEtleShldm50LmtleSlcclxuICBpZiAoIXJ1bkV2ZW50KGtleSwgZGlzYWJsZWRNYXBzLCBTS0VZX05BTkUuRU1JVCwgcGFyYW1zLCBldm50KSkge1xyXG4gICAgaWYgKHJ1bkV2ZW50KGtleSwgc2V0dGluZ01hcHMsIFNLRVlfTkFORS5UUklHR0VSLCBwYXJhbXMsIGV2bnQpID09PSBmYWxzZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuICAgIHJ1bkV2ZW50KGtleSwgbGlzdGVuZXJNYXBzLCBTS0VZX05BTkUuRU1JVCwgcGFyYW1zLCBldm50KVxyXG4gIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIHBhcnNlS2V5UmVzdCB7XHJcbiAgcmVhbEtleTogc3RyaW5nO1xyXG4gIHNwZWNpYWxLZXk6IHN0cmluZztcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VLZXlzIChrZXk6IHN0cmluZyk6IHBhcnNlS2V5UmVzdCB7XHJcbiAgbGV0IHNwZWNpYWxLZXk6IHN0cmluZyA9ICcnXHJcbiAgbGV0IHJlYWxLZXk6IHN0cmluZyA9ICcnXHJcbiAgbGV0IGtleXM6IHN0cmluZ1tdID0ga2V5LnNwbGl0KCcrJylcclxuICBrZXlzLmZvckVhY2goKGl0ZW06IHN0cmluZykgPT4ge1xyXG4gICAgaXRlbSA9IGl0ZW0udG9Mb3dlckNhc2UoKS50cmltKClcclxuICAgIGlmIChzcGVjaWFsS2V5cy5pbmRleE9mKGl0ZW0pID4gLTEpIHtcclxuICAgICAgc3BlY2lhbEtleSA9IGl0ZW1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlYWxLZXkgPSBpdGVtXHJcbiAgICB9XHJcbiAgfSlcclxuICBpZiAoIXJlYWxLZXkgfHwga2V5cy5sZW5ndGggPiAyIHx8IChrZXlzLmxlbmd0aCA9PT0gMiAmJiAhc3BlY2lhbEtleSkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgW3Z4ZS10YWJsZS1wbHVnaW4tc2hvcnRjdXQta2V5XSBJbnZhbGlkIHNob3J0Y3V0IGtleSBjb25maWd1cmF0aW9uICcke2tleX0nLmApXHJcbiAgfVxyXG4gIHJldHVybiB7IHJlYWxLZXksIHNwZWNpYWxLZXkgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRLZXlRdWV1ZSAobWFwczogS2V5U3RvcmVNYXBzLCBrQ29uZjogU2hvcnRjdXRLZXlDb25mLCBmdW5jTmFtZT86IEZVTkNfTkFORSkge1xyXG4gIGxldCB7IHJlYWxLZXksIHNwZWNpYWxLZXkgfSA9IHBhcnNlS2V5cyhrQ29uZi5rZXkpXHJcbiAgbGV0IHNrZXlMaXN0OiBTS2V5W10gPSBtYXBzW3JlYWxLZXldXHJcbiAgaWYgKCFza2V5TGlzdCkge1xyXG4gICAgc2tleUxpc3QgPSBtYXBzW3JlYWxLZXldID0gW11cclxuICB9XHJcbiAgaWYgKHNrZXlMaXN0LnNvbWUoKHNrZXk6IFNLZXkpID0+IHNrZXkucmVhbEtleSA9PT0gcmVhbEtleSAmJiBza2V5LnNwZWNpYWxLZXkgPT09IHNwZWNpYWxLZXkpKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFt2eGUtdGFibGUtcGx1Z2luLXNob3J0Y3V0LWtleV0gU2hvcnRjdXQga2V5IGNvbmZsaWN0ICcke2tDb25mLmtleX0nLmApXHJcbiAgfVxyXG4gIHNrZXlMaXN0LnB1c2gobmV3IFNLZXkocmVhbEtleSwgc3BlY2lhbEtleSwgZnVuY05hbWUsIGtDb25mKSlcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VEaXNhYmxlZEtleSAob3B0aW9uczogU2hvcnRjdXRLZXlPcHRpb25zKSB7XHJcbiAgWEVVdGlscy5lYWNoKG9wdGlvbnMuZGlzYWJsZWQsIChjb25mOiBzdHJpbmcgfCBTaG9ydGN1dEtleUNvbmYpID0+IHtcclxuICAgIGxldCBvcHRzOiBhbnkgPSBYRVV0aWxzLmlzU3RyaW5nKGNvbmYpID8geyBrZXk6IGNvbmYgfSA6IGNvbmZcclxuICAgIHNldEtleVF1ZXVlKGRpc2FibGVkTWFwcywgWEVVdGlscy5hc3NpZ24oeyBjYWxsYmFjazogKCkgPT4gZmFsc2UgfSwgb3B0cykpXHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VTZXR0aW5nS2V5IChvcHRpb25zOiBTaG9ydGN1dEtleU9wdGlvbnMpIHtcclxuICBYRVV0aWxzLmVhY2gob3B0aW9ucy5zZXR0aW5nLCAob3B0czogc3RyaW5nIHwgU2hvcnRjdXRLZXlTZXR0aW5nQ29uZmlnLCBmdW5jTmFtZTogRlVOQ19OQU5FKSA9PiB7XHJcbiAgICBsZXQga0NvbmY6IGFueSA9IFhFVXRpbHMuaXNTdHJpbmcob3B0cykgPyB7IGtleTogb3B0cyB9IDogb3B0c1xyXG4gICAgaWYgKCFoYW5kbGVGdW5jc1tmdW5jTmFtZV0pIHtcclxuICAgICAgY29uc29sZS53YXJuKGBbdnhlLXRhYmxlLXBsdWdpbi1zaG9ydGN1dC1rZXldICcke2Z1bmNOYW1lfScgbm90IGV4aXN0LmApXHJcbiAgICB9XHJcbiAgICBzZXRLZXlRdWV1ZShzZXR0aW5nTWFwcywga0NvbmYsIGZ1bmNOYW1lKVxyXG4gIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlTGlzdGVuZXJLZXkgKG9wdGlvbnM6IFNob3J0Y3V0S2V5T3B0aW9ucykge1xyXG4gIFhFVXRpbHMuZWFjaChvcHRpb25zLmxpc3RlbmVyLCAoY2FsbGJhY2s6IEZ1bmN0aW9uLCBrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgaWYgKCFYRVV0aWxzLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgW3Z4ZS10YWJsZS1wbHVnaW4tc2hvcnRjdXQta2V5XSAnJHtrZXl9JyByZXF1aXJlcyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgc2V0LmApXHJcbiAgICB9XHJcbiAgICBzZXRLZXlRdWV1ZShsaXN0ZW5lck1hcHMsIHsga2V5LCBjYWxsYmFjayB9KVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2hvcnRjdXRLZXlDb25mIHtcclxuICBrZXk6IHN0cmluZztcclxuICBjYWxsYmFjazogRnVuY3Rpb25cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaG9ydGN1dEtleUxpc3RlbmVyQ29uZmlnIHtcclxuICBbZnVuY05hbWU6IHN0cmluZ106IChwYXJhbXM6IEludGVyY2VwdG9yS2V5ZG93blBhcmFtcywgZXZudDogYW55KSA9PiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2hvcnRjdXRLZXlTZXR0aW5nQ29uZmlnIHtcclxuICBbZnVuY05hbWU6IHN0cmluZ106IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaG9ydGN1dEtleU9wdGlvbnMge1xyXG4gIGRpc2FibGVkPzogc3RyaW5nW10gfCBTaG9ydGN1dEtleUNvbmZbXTtcclxuICBsaXN0ZW5lcj86IFNob3J0Y3V0S2V5TGlzdGVuZXJDb25maWc7XHJcbiAgc2V0dGluZz86IFNob3J0Y3V0S2V5U2V0dGluZ0NvbmZpZztcclxufVxyXG5cclxuLyoqXHJcbiAqIOiuvue9ruWPguaVsFxyXG4gKiBAcGFyYW0gb3B0aW9ucyDlj4LmlbBcclxuICovXHJcbmZ1bmN0aW9uIHNldHVwIChvcHRpb25zOiBTaG9ydGN1dEtleU9wdGlvbnMpIHtcclxuICBpZiAob3B0aW9ucykge1xyXG4gICAgcGFyc2VEaXNhYmxlZEtleShvcHRpb25zKVxyXG4gICAgcGFyc2VTZXR0aW5nS2V5KG9wdGlvbnMpXHJcbiAgICBwYXJzZUxpc3RlbmVyS2V5KG9wdGlvbnMpXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICog5Z+65LqOIHZ4ZS10YWJsZSDooajmoLznmoTlop7lvLrmj5Lku7bvvIzkuLrplK7nm5jmk43kvZzmj5Dkvpvlv6vmjbfplK7nmoTorr7nva5cclxuICovXHJcbmV4cG9ydCBjb25zdCBWWEVUYWJsZVBsdWdpblNob3J0Y3V0S2V5ID0ge1xyXG4gIHNldHVwLFxyXG4gIGluc3RhbGwgKHh0YWJsZTogdHlwZW9mIFZYRVRhYmxlLCBvcHRpb25zPzogU2hvcnRjdXRLZXlPcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICBzZXR1cChvcHRpb25zKVxyXG4gICAgfVxyXG4gICAgeHRhYmxlLmludGVyY2VwdG9yLmFkZCgnZXZlbnQua2V5ZG93bicsIGhhbmRsZVNob3J0Y3V0S2V5RXZlbnQpXHJcbiAgfVxyXG59XHJcblxyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZYRVRhYmxlKSB7XHJcbiAgd2luZG93LlZYRVRhYmxlLnVzZShWWEVUYWJsZVBsdWdpblNob3J0Y3V0S2V5KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWWEVUYWJsZVBsdWdpblNob3J0Y3V0S2V5XHJcbiJdfQ==
